#include "OpenBox.h"

bool solveWithGauss(
    std::vector<std::vector<int>>& matrix, // –º–∞—Ç—Ä–∏—Ü—è –≤–ø–ª–∏–≤—É (A) ‚Äî NxN
    std::vector<int>& targetState, // –≤–µ–∫—Ç–æ—Ä –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É (b)
    std::vector<int>& solution // –í–µ–∫—Ç–æ—Ä —Ä—ñ—à–µ–Ω–Ω—è: —è–∫—ñ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Ç–∏—Å–∫–∞—Ç–∏ (x)
) {
    const size_t numRows = matrix.size();// –°–∫—ñ–ª—å–∫–∏ –ª–∞–º–ø–æ—á–æ–∫ = —Å–∫—ñ–ª—å–∫–∏ —Ä—ñ–≤–Ω—è–Ω—å
    const size_t numCols = matrix[0].size();// –°–∫—ñ–ª—å–∫–∏ –∫–Ω–æ–ø–æ–∫ = —Å–∫—ñ–ª—å–∫–∏ –∑–º—ñ–Ω–Ω–∏—Ö (–Ω–µ–≤—ñ–¥–æ–º–∏—Ö)
    solution.assign(numCols, 0);//—Å—Ç–≤–æ—Ä—é—é –ø—É—Å—Ç—É –∫–æ–ª–æ–Ω–∫—É –∫—É–¥–∏ –±—É–¥–µ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏—Å—å –∫–Ω–æ–ø–∫–∞

    size_t rank = 0; // —Ü–µ —ñ–Ω–¥–µ–∫—Å —Ä—è–¥–∫–∞, –∑ —è–∫–æ–≥–æ —Ç—Ä–µ–±–∞ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–∞–ª—ñ –≤ –º–µ—Ç–æ–¥—ñ –ì–∞—É—Å—Å–∞(–°—Ç–∞—Ä—Ç–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è –ø–æ—à—É–∫—É –ø—ñ–≤–æ—Ç—ñ–≤)

    for (size_t col = 0; col < numCols && rank < numRows; ++col) {
        size_t pivotRow = rank; // –ü–æ—á–∏–Ω–∞—î–º–æ –ø–æ—à—É–∫ –ø—ñ–≤–æ—Ç–∞ –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ rank-—Ä—è–¥–∫–∞

        // üîç –®—É–∫–∞—î–º–æ —Ä—è–¥–æ–∫ —ñ–∑ 1 —É –ø–æ—Ç–æ—á–Ω–æ–º—É —Å—Ç–æ–≤–ø—Ü—ñ
        while (pivotRow < numRows && matrix[pivotRow][col] == 0)
            ++pivotRow;

        if (pivotRow == numRows)
            continue; // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –ø—ñ–≤–æ—Ç–∞ —É —Ü—å–æ–º—É —Å—Ç–æ–≤–ø—Ü—ñ ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ

        // üîÉ –°—Ç–∞–≤–∏–º–æ –∑–Ω–∞–π–¥–µ–Ω–∏–π –ø—ñ–≤–æ—Ç–Ω–∏–π —Ä—è–¥–æ–∫ –Ω–∞ –ø–æ–∑–∏—Ü—ñ—é rank
        std::swap(matrix[pivotRow], matrix[rank]);
        std::swap(targetState[pivotRow], targetState[rank]);

        // ‚ùå –û–±–Ω—É–ª—è—î–º–æ –≤—Å—ñ —ñ–Ω—à—ñ 1 –≤ —Ü—å–æ–º—É —Å—Ç–æ–≤–ø—Ü—ñ (–µ–ª—ñ–º—ñ–Ω–∞—Ü—ñ—è)
        for (size_t row = 0; row < numRows; ++row) {
            if (row != rank && matrix[row][col] == 1) {
                for (size_t j = col; j < numCols; ++j)
                    matrix[row][j] ^= matrix[rank][j]; // XOR ‚Äî –æ–±–Ω—É–ª—è—î–º–æ —Ä—è–¥–æ–∫
                targetState[row] ^= targetState[rank]; // –¢–∞–∫ —Å–∞–º–æ –æ–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–≤—É —á–∞—Å—Ç–∏–Ω—É
            }
        }

        ++rank; // ‚úÖ –ó–Ω–∞–π—à–ª–∏ —â–µ –æ–¥–Ω–µ –Ω–µ–∑–∞–ª–µ–∂–Ω–µ —Ä—ñ–≤–Ω—è–Ω–Ω—è
    }

    // ‚ùó –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Å–∏—Å—Ç–µ–º–∞ —Å—É–º—ñ—Å–Ω–∞
    for (size_t i = rank; i < numRows; ++i) {
        bool isZeroRow = true;
        for (int val : matrix[i]) {
            if (val != 0) {
                isZeroRow = false;
                break;
            }
        }
        if (isZeroRow && targetState[i] == 1)
            return false; // –ù–µ—Å—É–º—ñ—Å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞: 0 = 1
    }

    // ‚Ü©Ô∏è –ó–≤–æ—Ä–æ—Ç–Ω—ñ–π —Ö—ñ–¥ –ì–∞—É—Å—Å–∞ ‚Äî –≤–∏—Ç—è–≥—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —É x
    for (size_t i = rank; i-- > 0;) {
        int pivotCol = -1;

        // üîç –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å—Ç–æ–≤–ø–µ—Ü—å –ø—ñ–≤–æ—Ç–∞ (–ø–µ—Ä—à—É 1 –≤ —Ä—è–¥–∫—É)
        for (size_t j = 0; j < numCols; ++j) {
            if (matrix[i][j] == 1) {
                pivotCol = static_cast<int>(j);
                break;
            }
        }

        if (pivotCol == -1)
            continue; // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –ø—ñ–≤–æ—Ç–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ (—Ä—ñ–¥–∫–æ –±—É–≤–∞—î)

        // üß† –û–±—á–∏—Å–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è x[pivotCol], –≤—ñ–¥–Ω—ñ–º–∞—é—á–∏ –≤—ñ–¥–æ–º—É —á–∞—Å—Ç–∏–Ω—É
        int xorSum = targetState[i];
        for (size_t j = pivotCol + 1; j < numCols; ++j)
            if (matrix[i][j] == 1)
                xorSum ^= solution[j]; // –í—ñ–¥–Ω—ñ–º–∞—î–º–æ –≤–ø–ª–∏–≤ –≤—ñ–¥–æ–º–∏—Ö x[j]
        solution[pivotCol] = xorSum; // –ó–∞–ø–∏—Å—É—î–º–æ —Ä—ñ—à–µ–Ω–Ω—è
    }

    return true; // ‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–∞—î —Ä–æ–∑–≤‚Äô—è–∑–æ–∫, –≤—ñ–Ω —É solution
}

//================================================================================
// Function: createEquationSystem
// Description: –°—Ç—Ä–æ–∏—Ç –º–∞—Ç—Ä–∏—Ü—É –≤–ª–∏—è–Ω–∏—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∏ –≤–µ–∫—Ç–æ—Ä
//              —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —è—á–µ–µ–∫ (–≤–∫–ª—é—á–µ–Ω–æ/–≤—ã–∫–ª—é—á–µ–Ω–æ).
//================================================================================
void createEquationSystem(
    const std::vector<std::vector<bool>>& boxState,
    std::vector<std::vector<int>>& influenceMatrix,
    std::vector<int>& initialStateVector
) {
    uint32_t rows = boxState.size();// –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤
    uint32_t cols = boxState[0].size();//–∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–≤–æ–±—Ü—ñ–≤
    uint32_t totalCells = rows * cols;// –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ—Ç–∏–Ω–æ–∫ (–¥–ª—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è 2D -> 1D)

    influenceMatrix.assign(totalCells, std::vector<int>(totalCells, 0));//–ú–∞—Ç—Ä–∏—Ü—è, —è–∫–∞ –ø–æ–∫–∞–∑—É—î, —è–∫ –∫–æ–∂–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤–ø–ª–∏–≤–∞—î –Ω–∞ –∫–æ–∂–Ω—É –∫–ª—ñ—Ç–∏–Ω–∫—É = 2D, –ø–æ—á–∞—Ç–∫–æ–≤–æ –≤—Å—ñ –Ω—É–ª—ñ
    initialStateVector.assign(totalCells, 0);// –í–µ–∫—Ç–æ—Ä –∑ –ø–æ—Ç–æ—á–Ω–∏–º —Å—Ç–∞–Ω–æ–º –ª–∞–º–ø–æ—á–æ–∫, –ø–æ—á–∞—Ç–∫–æ–≤–æ –≤—Å—ñ –Ω—É–ª—ñ

    // üí° –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –∫–æ–∂–Ω—ñ–π –∫–Ω–æ–ø—Ü—ñ –ø–æ–ª—è
    for (uint32_t row = 0; row < rows; ++row) {
        for (uint32_t col = 0; col < cols; ++col) {
            int toggleIndex = row * cols + col;//  –í–∏—Ä–∞—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–µ–∫—Å –∫–Ω–æ–ø–∫–∏ –≤ 1D –º–∞—Å–∏–≤—ñ (flattened)

            //  –ö–Ω–æ–ø–∫–∞ –≤–ø–ª–∏–≤–∞—î –Ω–∞ –í–ï–°–¨ –°–í–Ü–ô –†–Ø–î–û–ö
            for (uint32_t k = 0; k < cols; ++k)
                influenceMatrix[row * cols + k][toggleIndex] ^= 1;

            //  –ö–Ω–æ–ø–∫–∞ –≤–ø–ª–∏–≤–∞—î –Ω–∞ –í–ï–°–¨ –°–í–Ü–ô –°–¢–û–í–ü–ï–¶–¨
            for (uint32_t k = 0; k < rows; ++k)
                influenceMatrix[k * cols + col][toggleIndex] ^= 1;

            //  –ö–Ω–æ–ø–∫–∞ –∑–º—ñ–Ω—é—î –°–ê–ú–£ –°–ï–ë–ï
            influenceMatrix[toggleIndex][toggleIndex] ^= 1;
        }
    }

    // –§–æ—Ä–º—É—î–º–æ –≤–µ–∫—Ç–æ—Ä b (initialStateVector) –∑ 2D boxState
    // –ö–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç: 1 —è–∫—â–æ –ª–∞–º–ø–æ—á–∫–∞ –≤ —Ü—ñ–π –∫–ª—ñ—Ç–∏–Ω—Ü—ñ –≥–æ—Ä–∏—Ç—å, 0 ‚Äî —è–∫—â–æ –≤–∏–º–∫–Ω–µ–Ω–∞
    for (uint32_t row = 0; row < rows; ++row)
        for (uint32_t col = 0; col < cols; ++col)
            initialStateVector[row * cols + col] = boxState[row][col] ? 1 : 0;
}


//================================================================================
// Function: openBox
// Description: –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è –∫–æ—Ä–æ–±–∫—É. –°—Ç—Ä–æ–∏—Ç —É—Ä–∞–≤–Ω–µ–Ω–∏–µ,
//              —Ä–µ—à–∞–µ—Ç –µ–≥–æ, –ø—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–∞–∂–∞—Ç–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç,
//              –æ—Å—Ç–∞–ª–∞—Å—å –ª–∏ –∫–æ—Ä–æ–±–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π.
//================================================================================
bool openBox(uint32_t rows, uint32_t cols) {
    SecureBox box(rows, cols); // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–æ–±–∫—É
    int step = 1; // –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –º–æ–π–æ–≥–æ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –∞–ª–≥–æ—Ä–∏—Ç–º—É

    std::vector<std::pair<int, int>> keySequence; // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å

    while (box.isLocked()) {
        auto state = box.getState(); // —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é –º–æ—î—ó –∫–æ—Ä–æ–±–∫–∏

        std::vector<std::vector<int>> A;//—Å—Ç–≤–æ—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é —Ä–æ–∑–º—ñ—Ä–æ–º —è–∫–∏–π –º–∏ –∑–∞–¥–∞–ª–∏
        std::vector<int> b;//–ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –ø–æ–ª—è, ‚Äú–¥–µ –∑–∞—Ä–∞–∑ —Å–≤—ñ—Ç–ª–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ‚Äù
        createEquationSystem(state, A, b);

        std::vector<int> solution;
        if (!solveWithGauss(A, b, solution)) {
            std::cout << "[!] –†—ñ—à–µ–Ω–Ω—è –Ω–µ–º–æ–∂–ª–∏–≤–µ –Ω–∞ —Ü—å–æ–º—É –∫—Ä–æ—Ü—ñ." << std::endl;
            return true;
        }

        bool moved = false;

        for (uint32_t i = 0; i < solution.size(); ++i) {
            if (solution[i]) {
                uint32_t row = i / cols;
                uint32_t col = i % cols;

                box.toggle(row, col);

                keySequence.emplace_back(row, col);
                step++;
                moved = true;
                break;
            }
        }

        if (!moved) {
            std::cout << "[!] –ñ–æ–¥–Ω–æ—ó –∫–Ω–æ–ø–∫–∏ –Ω–µ –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ ‚Äî –ø–æ–º–∏–ª–∫–∞." << std::endl;
            break;
        }
    }

    if (!box.isLocked()) {
        std::cout << "\n The key to opening(a sequence of pressing):" << std::endl;
        for (auto& [row, col] : keySequence) {
            std::cout << "toggle(" << row << ", " << col << ")" << std::endl;
        }
        return false;

    } else {
        return true;
    }
}
